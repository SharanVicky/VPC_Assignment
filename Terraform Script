root@ip-172-31-45-220:/terrform# cat provider.tf
terraform {
required_providers {
aws = {
source = &quot;hashicorp/aws&quot;
version = &quot;~&gt; 5.0&quot;
}
}
}

# Configure the AWS Provider
provider &quot;aws&quot; {
region = &quot;ap-south-1&quot;
}
root@ip-172-31-45-220:/terrform#
1.VPC and subnet

root@ip-172-31-45-220:/terrform# cat vpc.tf

resource &quot;aws_vpc&quot; &quot;MyVPC&quot; {
cidr_block = &quot;10.10.0.0/16&quot;
tags = {
Name = &quot;MyVPC&quot;
}
}

root@ip-172-31-45-220:/terrform# cat subnet.tf

#Create a public subnet
resource &quot;aws_subnet&quot; &quot;Public&quot; {
vpc_id = aws_vpc.MyVPC.id
cidr_block = &quot;10.10.1.0/24&quot;

tags = {
Name = &quot;MyVpc-public Subnet&quot;
}
}
#create a private subnet
resource &quot;aws_subnet&quot; &quot;Private&quot; {
vpc_id = aws_vpc.MyVPC.id
cidr_block = &quot;10.10.2.0/24&quot;
tags = {
Name = &quot;MyVpc-Private Subnet&quot;
}
}
root@ip-172-31-45-220:/terrform#

2.
resource "aws_instance" "AWSEC2Instance" {
  ami = "ami-06f621d90fa29f6d0"
  instance_type = "t2.micro"
  security_groups = ["Launch-wizard-4"]
  key_name = "udhaya"
  tags = {
    Purpose = "assignment"
  } 
}
# Add internet gateway
resource "aws_internet_gateway" "prod-igw" {
    vpc_id = "${aws_vpc.prod-vpc.id}"
    tags = {
        Name = "prod-igw"
    }
}

# Public routes
resource "aws_route_table" "prod-public-crt" {
    vpc_id = "${aws_vpc.prod-vpc.id}"
    
    route {
        cidr_block = "0.0.0.0/0" 
        gateway_id = "${aws_internet_gateway.prod-igw.id}" 
    }
    
    tags = {
        Name = "prod-public-crt"
    }
}
resource "aws_route_table_association" "prod-crta-public-subnet-1"{
    subnet_id = "${aws_subnet.prod-subnet-public-1.id}"
    route_table_id = "${aws_route_table.prod-public-crt.id}"
}
provider "aws" {
region = "ap-south-1"
access_key = "AKIASHW7QTLLFOHJRC2G"
secret_key = "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"
}

resource "aws_vpc" "prod-vpc" {
    cidr_block = "10.0.0.0/16"
    enable_dns_support = "true"
    enable_dns_hostnames = "true"

    tags = {
        Name = "prod-vpc"
    }
}

resource "aws_subnet" "prod-subnet-public-1" {
    vpc_id = "${aws_vpc.prod-vpc.id}"
    cidr_block = "10.0.1.0/24"
    map_public_ip_on_launch = "true" # This is what makes it a public subnet
    availability_zone = "ap-south-1a"
    tags = {
        Name = "prod-subnet-public-1"
    }
}

resource "aws_subnet" "prod-subnet-private-1" {
    vpc_id = "${aws_vpc.prod-vpc.id}"
    cidr_block = "10.0.2.0/24"
    availability_zone = "ap-south-1a"
    tags = {
        Name = "prod-subnet-private-1"
    }
}
 # aws_instance.AWSEC2Instance will be created
  + resource "aws_instance" "AWSEC2Instance" {
      + ami                                  = "ami-06f621d90fa29f6d0"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "udhaya"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = [
          + "Launch-wizard-4",
        ]
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Purpose" = "assignment"
        }
      + tags_all                             = {
          + "Purpose" = "assignment"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification {
          + capacity_reservation_preference = (known after apply)

          + capacity_reservation_target {
              + capacity_reservation_id = (known after apply)
            }
        }

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
          + instance_metadata_tags      = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_internet_gateway.prod-igw will be created
  + resource "aws_internet_gateway" "prod-igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "prod-igw"
        }
      + tags_all = {
          + "Name" = "prod-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_route_table.prod-public-crt will be created
  + resource "aws_route_table" "prod-public-crt" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + carrier_gateway_id         = ""
              + cidr_block                 = "0.0.0.0/0"
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + local_gateway_id           = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags             = {
          + "Name" = "prod-public-crt"
        }
      + tags_all         = {
          + "Name" = "prod-public-crt"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.prod-crta-public-subnet-1 will be created
  + resource "aws_route_table_association" "prod-crta-public-subnet-1" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.ssh-allowed will be created
  + resource "aws_security_group" "ssh-allowed" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "ssh-allowed"
        }
      + tags_all               = {
          + "Name" = "ssh-allowed"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_subnet.prod-subnet-private-1 will be created
  + resource "aws_subnet" "prod-subnet-private-1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-south-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "prod-subnet-private-1"
        }
      + tags_all                                       = {
          + "Name" = "prod-subnet-private-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.prod-subnet-public-1 will be created
  + resource "aws_subnet" "prod-subnet-public-1" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "ap-south-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "prod-subnet-public-1"
        }
      + tags_all                                       = {
          + "Name" = "prod-subnet-public-1"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.prod-vpc will be created
  + resource "aws_vpc" "prod-vpc" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_classiclink                   = (known after apply)
      + enable_classiclink_dns_support       = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "prod-vpc"
        }
      + tags_all                             = {
          + "Name" = "prod-vpc"
        }
    }

Plan: 8 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_vpc.prod-vpc: Creating...
aws_instance.AWSEC2Instance: Creating...
aws_instance.AWSEC2Instance: Still creating... [10s elapsed]
aws_vpc.prod-vpc: Still creating... [10s elapsed]
aws_vpc.prod-vpc: Creation complete after 12s [id=vpc-01d1b6c89a5aefee2]
aws_internet_gateway.prod-igw: Creating...
aws_subnet.prod-subnet-public-1: Creating...
aws_subnet.prod-subnet-private-1: Creating...
aws_security_group.ssh-allowed: Creating...
aws_subnet.prod-subnet-private-1: Creation complete after 1s [id=subnet-08c0c89448e2f7837]
aws_internet_gateway.prod-igw: Creation complete after 1s [id=igw-0588f7b6f528d88d4]
aws_route_table.prod-public-crt: Creating...
aws_route_table.prod-public-crt: Creation complete after 1s [id=rtb-0d9f2bac3c50e3027]
aws_security_group.ssh-allowed: Creation complete after 3s [id=sg-0cd61187faaff8edc]
aws_instance.AWSEC2Instance: Creation complete after 16s [id=i-0761b085e4654f720]
aws_subnet.prod-subnet-public-1: Still creating... [10s elapsed]
aws_subnet.prod-subnet-public-1: Creation complete after 11s [id=subnet-0fc17402bcbde296a]
aws_route_table_association.prod-crta-public-subnet-1: Creating...
aws_route_table_association.prod-crta-public-subnet-1: Creation complete after 1s [id=rtbassoc-0c5cd506fb0f6df5e]

3.
root@ip-172-31-45-220:/terrform# cat sg.tf
resource &quot;aws_security_group&quot; &quot;mysg&quot; {
name = &quot;mysg&quot;
vpc_id = aws_vpc.MyVPC.id
ingress {
cidr_blocks = [
&quot;0.0.0.0/0&quot;
]
description = &quot;Allow SSH port&quot;
from_port = 22
to_port = 22
protocol = &quot;tcp&quot;
}

egress {
from_port = 0
to_port = 0
protocol = &quot;-1&quot;
cidr_blocks = [&quot;0.0.0.0/0&quot;]
}
tags = {
Name = &quot;mysg&quot;
}
}
root@ip-172-31-45-220:/terrform#
